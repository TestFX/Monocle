//buildscript {
//    repositories {
//        mavenCentral()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//}

apply plugin: "java"
apply plugin: 'maven'

// print welcome message.
//apply from: rootProject.file("gradle/welcome.gradle")
//
//wrapper {
//    gradleVersion = '6.5.1'
//    distributionUrl = "https://services.gradle.org/distributions/" +
//        "gradle-${gradleVersion}-bin.zip"
//}
//
//// task to print gradle and groovy versions.
//task("versions", group: "help").doLast {
//    println "Java version: ${System.properties["java.version"]}"
//    println "Gradle version: ${gradle.gradleVersion}"
//    println "Groovy version: ${GroovySystem.version}"
//}
//
//// task to create main and test source directories.
//task("initSourceDirs", group: "build setup").doLast {
//    // ignore source directories for projects without source sets.
//    if (!project.hasProperty("sourceSets")) { return }
//
//    // list all source directories.
//    def sourceSets = project.sourceSets as SourceSetContainer
//    def sourceDirs = sourceSets*.allSource.srcDirs.flatten() as List<File>
//
//    // create source directories, for those who not exists.
//    for (sourceDir in sourceDirs) { sourceDir.mkdirs() }
//}

repositories {
    mavenCentral()
}

static def getOSName() {
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("mac")
    } else if (osName.contains("windows")) {
        return ("win")
    }
    return ""
}

ext {
    def buildTimeAndDate = new Date()
    buildDate = buildTimeAndDate.format("yyyy-MM-dd")
    buildTime = buildTimeAndDate.format("HH:mm:ss.SSSZ")

    javaVersion = System.properties["java.version"]
    javaVendor = System.properties["java.vendor"]
    javaVmVersion = System.properties["java.vm.version"]
    platform = getOSName()
}

// java language level.
sourceCompatibility = "11"
targetCompatibility = "11"

dependencies {
    implementation "org.openjfx:javafx-base:11.0.2:${platform}"
    implementation "org.openjfx:javafx-graphics:11.0.2:${platform}"
}

// configure publish tasks.
apply from: rootProject.file("gradle/publish-pom.gradle")

// task to create jar with source code.
task("sourceJar", type: Jar) {
    group "Build"
    description "An archive of the source code"
    classifier "sources"
    from sourceSets.main.allJava
}

// task to create jar with javadocs.
task("javadocJar", type: Jar) {
    group "Build"
    description "An archive of the javadoc"
    classifier "javadoc"
    from javadoc
}

jar.finalizedBy createPom
jar.finalizedBy sourceJar
jar.finalizedBy javadocJar

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    createPom
}

compileJava {
    javadoc {
        options.addStringOption("Xdoclint:none", "-quiet")
    }
}

jar {
    manifest.attributes(
        "Created-By": project.javaVersion +
            " (" + project.javaVendor + " " + project.javaVmVersion + ")",
        "Build-Date": project.buildDate,
        "Build-Time": project.buildTime,
        "Specification-Title": project.name,
        "Specification-Version": project.version,
        "Specification-Vendor": project.vendor,
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Implementation-Vendor": project.vendor,
        "Automatic-Module-Name": "org.testfx.monocle",
    )
}

