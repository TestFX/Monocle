buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.0.7'
    }
}

apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'maven'

// print welcome message.
apply from: rootProject.file("gradle/welcome.gradle")

wrapper {
    gradleVersion = '6.5.1'
    distributionUrl = "https://services.gradle.org/distributions/" +
        "gradle-${gradleVersion}-bin.zip"
}

// task to print gradle and groovy versions.
task("versions", group: "help").doLast {
    println "Java version: ${System.properties["java.version"]}"
    println "Gradle version: ${gradle.gradleVersion}"
    println "Groovy version: ${GroovySystem.version}"
}

// task to create main and test source directories.
task("initSourceDirs", group: "build setup").doLast {
    // ignore source directories for projects without source sets.
    if (!project.hasProperty("sourceSets")) { return }

    // list all source directories.
    def sourceSets = project.sourceSets as SourceSetContainer
    def sourceDirs = sourceSets*.allSource.srcDirs.flatten() as List<File>

    // create source directories, for those who not exists.
    for (sourceDir in sourceDirs) { sourceDir.mkdirs() }
}

// provide java tasks.
apply plugin: "java"

repositories {
    mavenCentral()
}

javafx {
    modules = [ 'javafx.controls', 'javafx.graphics' ]
    version = '12.0.1'
}

// java language level.
sourceCompatibility = "9"
targetCompatibility = "9"

// configure publish tasks.
apply from: rootProject.file("gradle/publish-pom.gradle")

// task to create jar with source code.
task("sourceJar", type: Jar) {
    group "Build"
    description "An archive of the source code"
    classifier "sources"
    from sourceSets.main.allJava
}

// task to create jar with javadocs.
task("javadocJar", type: Jar) {
    group "Build"
    description "An archive of the javadoc"
    classifier "javadoc"
    from javadoc
}

jar.finalizedBy createPom
jar.finalizedBy sourceJar
jar.finalizedBy javadocJar

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    createPom
}

compileJava {
    javadoc {
        options.addStringOption("Xdoclint:none", "-quiet")
        options.addMultilineStringsOption('-add-exports').setValue(['javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        'javafx.graphics/com.sun.glass.events=ALL-UNNAMED',
        'javafx.graphics/com.sun.glass.ui.delegate=ALL-UNNAMED',
        'javafx.graphics/com.sun.glass.utils=ALL-UNNAMED',
        'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',])
    }
}

ext {
    def buildTimeAndDate = new Date()
    buildDate = buildTimeAndDate.format("yyyy-MM-dd")
    buildTime = buildTimeAndDate.format("HH:mm:ss.SSSZ")

    javaVersion = System.properties["java.version"]
    javaVendor = System.properties["java.vendor"]
    javaVmVersion = System.properties["java.vm.version"]
}

jar {
    manifest.attributes(
        "Created-By": project.javaVersion +
            " (" + project.javaVendor + " " + project.javaVmVersion + ")",
        "Build-Date": project.buildDate,
        "Build-Time": project.buildTime,
        "Specification-Title": project.name,
        "Specification-Version": project.version,
        "Specification-Vendor": project.vendor,
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Implementation-Vendor": project.vendor,
        "Automatic-Module-Name": "org.testfx.monocle",
    )
}

